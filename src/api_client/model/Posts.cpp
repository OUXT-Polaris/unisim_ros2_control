/**
 * unisim_ros2_control_api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.22.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Posts.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Posts::Posts()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Published = false;
    m_PublishedIsSet = false;
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
}

Posts::~Posts()
{
}

void Posts::validate()
{
    // TODO: implement validation
}

web::json::value Posts::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_PublishedIsSet)
    {
        val[utility::conversions::to_string_t("published")] = ModelBase::toJson(m_Published);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }

    return val;
}

void Posts::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("title")];
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("published")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("published")];
        if(!fieldValue.is_null())
        {
            setPublished(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("content")];
        if(!fieldValue.is_null())
        {
            setContent(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Posts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
        
    }
    if(m_PublishedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("published"), m_Published));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
        
    }
}

void Posts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("published")))
    {
        setPublished(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("published"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        setContent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("content"))));
    }
}

utility::string_t Posts::getName() const
{
    return m_Name;
}


void Posts::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Posts::nameIsSet() const
{
    return m_NameIsSet;
}

void Posts::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Posts::getTitle() const
{
    return m_Title;
}


void Posts::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Posts::titleIsSet() const
{
    return m_TitleIsSet;
}

void Posts::unsetTitle()
{
    m_TitleIsSet = false;
}

bool Posts::isPublished() const
{
    return m_Published;
}


void Posts::setPublished(bool value)
{
    m_Published = value;
    m_PublishedIsSet = true;
}
bool Posts::publishedIsSet() const
{
    return m_PublishedIsSet;
}

void Posts::unsetPublished()
{
    m_PublishedIsSet = false;
}

utility::string_t Posts::getContent() const
{
    return m_Content;
}


void Posts::setContent(utility::string_t value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool Posts::contentIsSet() const
{
    return m_ContentIsSet;
}

void Posts::unsetContent()
{
    m_ContentIsSet = false;
}

}
}
}
}

